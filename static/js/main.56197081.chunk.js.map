{"version":3,"sources":["AppHeader.tsx","SearchBox.tsx","MovieResultDisplay.tsx","MovieResults.tsx","NominationDisplay.tsx","NominationsList.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["AppHeader","style","textAlign","width","SearchBox","onChange","Form","Group","Control","size","type","placeholder","event","target","value","MovieResultDisplay","movie","nominationDisabled","addNomination","display","marginBottom","src","poster","alt","padding","title","year","Button","onClick","disabled","imdbId","MovieResults","query","useState","resultsList","setResultsList","loading","setLoading","error","setError","useLocalStorage","nominations","setNominations","newNominations","concat","useEffect","fetch","method","then","res","json","response","Response","movieResults","Search","map","Title","Year","Poster","imdbID","Error","catch","console","log","Col","md","xs","length","undefined","find","nomination","NominationDisplay","removeNomination","variant","NominationsList","movieId","reduce","accumulator","push","Alert","App","setQuery","Container","Nav","activeKey","Item","Link","href","Row","newQuery","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.56197081.chunk.js","sourcesContent":["import React from \"react\";\n\nexport const AppHeader = () => {\n  return <h1 style={{textAlign: \"center\", width: \"100%\"}}>Welcome to the Shoppies!</h1>;\n};\n","import React from \"react\";\nimport Form from \"react-bootstrap/esm/Form\";\n\ninterface IProps {\n  onChange: (query: string) => void;\n}\n\nexport const SearchBox: React.FC<IProps> = ({ onChange }) => {\n  return (\n    <Form.Group style={{ width: \"100%\" }} >\n      <Form.Control size=\"lg\" type=\"text\" placeholder=\"Search for a movie...\" onChange={(event) => {\n        onChange(event.target.value);\n      }} />\n    </Form.Group>\n  );\n};\n","import { Button } from \"react-bootstrap\";\nimport { Movie } from \"./Models/Movie\";\n\ninterface IProps {\n  movie: Movie;\n  nominationDisabled: boolean;\n  addNomination: (movie: Movie) => void;\n}\n\nexport const MovieResultDisplay: React.FC<IProps> = ({\n  movie,\n  nominationDisabled,\n  addNomination,\n}) => {\n  return (\n    <div key={movie.imdbId} style={{display: 'flex', marginBottom: '30px'}}>\n      <img width=\"35%\" src={movie.poster} alt=\"Movie Poster\"></img> \n      <div style={{display: 'block', width: \"65%\", padding: \"20px\"}}>\n        <h3>{movie.title}</h3>\n        <p>{movie.year}</p>\n        <Button\n          onClick={() => addNomination(movie)}\n          disabled={nominationDisabled}\n        >Nominate\n        </Button>\n      </div>\n    </div>\n  );\n};\n","import useLocalStorage from \"@rehooks/local-storage\";\nimport React, { useEffect, useState } from \"react\";\nimport Col from \"react-bootstrap/esm/Col\";\nimport { Movie, OMDBResponse } from \"./Models/Movie\";\nimport { MovieResultDisplay } from \"./MovieResultDisplay\";\n\n\ninterface IProps {\n  query: string;\n}\n\nconst apiKey = \"c27b211a\";\n\nexport const MovieResults: React.FC<IProps> = ({ query }) => {\n  const [resultsList, setResultsList] = useState<Movie[]>([]);\n  const [loading, setLoading] = useState<boolean>(false);\n  const [error, setError] = useState<string>(\"\");\n  const [nominations, setNominations] = useLocalStorage(\"nominations\", [] as Movie[]);\n\n  const addNomination = (movie: Movie) => {\n    const newNominations = nominations.concat([movie]);\n    setNominations(newNominations);\n  };\n\n  // TODO move this into its own hook\n  // i.e. const movieResults = useMovieApiCall(query);\n  useEffect(() => {\n    if (!query) {\n      setError(\"\");\n      setResultsList([]);\n      return;\n    }\n\n    setLoading(true);\n    fetch(`https://www.omdbapi.com/?s=${query}&type=movie&apikey=${apiKey}`, {\n      method: \"GET\",\n    })\n      .then((res) => res.json())\n      .then((response: OMDBResponse) => {\n        const success = response.Response === \"True\";\n        if (success) {\n          const responseMovies = response.Search;\n          const movieResults = responseMovies.map((movie) => {\n            return {\n              title: movie.Title,\n              year: movie.Year,\n              poster: movie.Poster,\n              imdbId: movie.imdbID,\n            };\n          });\n          setError(\"\");\n          setResultsList(movieResults);\n        } else {\n          // Failed query to OMDB API\n          if (response.Error === \"Too many results.\") {\n            setError(\"Try a more specific query.\");\n          } else {\n            setError(response.Error);\n          }\n          setResultsList([]);\n        }\n        setLoading(false);\n      })\n      .catch((error) => {\n        console.log(error);\n        setError(\"Server down. Please try again!\");\n        setLoading(false);\n      });\n  }, [query, setLoading, setResultsList, setError]);\n\n  return (\n    <Col md=\"6\" xs=\"12\">\n      {loading && \"Loading...\"}\n      {!loading && !error && (\n        <>\n          <>\n            {resultsList.length >= 1 && (\n              <h2 style={{ marginBottom: '20px' }}>Search results for {query}</h2> \n            )}\n          </>\n          <>\n            {resultsList.map((movie) => (\n              <MovieResultDisplay\n                movie={movie}\n                nominationDisabled={\n                  nominations.length === 5 ||  // No more nominations if we're at capacity\n                  nominations.find((nomination) => nomination.imdbId === movie.imdbId) !== undefined  // Cannot re-nominate if already nominated\n                }\n                addNomination={addNomination}\n              ></MovieResultDisplay>\n            ))}\n          </>\n        </>\n      )}\n      {!loading && error && <h3>{error}</h3>}\n    </Col>\n  );\n};\n","import { Button } from \"react-bootstrap\";\nimport { Movie } from \"./Models/Movie\";\n\ninterface IProps {\n  movie: Movie;\n  removeNomination: (movieId: string) => void;\n}\n\nexport const NominationDisplay: React.FC<IProps> = ({\n  movie,\n  removeNomination,\n}) => {\n  return (\n    <div key={movie.imdbId} style={{display: 'flex', marginBottom: '30px'}}>\n      <img width=\"35%\" src={movie.poster} alt=\"Movie Poster\"/>\n      <div style={{display: 'block', width: \"65%\", padding: \"20px\"}}>\n        <h3>{movie.title}</h3>\n        <p>{movie.year}</p>\n        <Button\n            variant=\"danger\"\n            onClick={() => removeNomination(movie.imdbId)}\n        >\n            Remove\n        </Button>\n      </div>\n    </div>\n  );\n};","import useLocalStorage from \"@rehooks/local-storage\";\nimport React from \"react\";\nimport { Alert } from \"react-bootstrap\";\nimport Col from \"react-bootstrap/esm/Col\";\nimport { Movie } from \"./Models/Movie\";\nimport { NominationDisplay } from \"./NominationDisplay\";\n\n\nconst apiKey = \"c27b211a\";\n\nexport const NominationsList: React.FC = () => {\n  const [nominations, setNominations] = useLocalStorage(\"nominations\", [] as Movie[]);\n\n\n  const removeNomination = (movieId: string) => {\n    const newNominations = nominations.reduce((accumulator, movie) => {\n      if (movie.imdbId !== movieId) {\n        accumulator.push(movie)\n      }\n        return accumulator\n    }, [] as Movie[]);\n\n    setNominations(newNominations)\n  };\n\n  return (\n    <Col md=\"6\" xs=\"12\">\n      {nominations.length !== 0 && (\n      <h2 style={{ marginBottom: '20px' }}>Your Nominations</h2>\n      )}\n      {nominations.length === 5 && (\n        <Alert variant=\"success\">\n          Your nominations are full, thank you!\n        </Alert>\n      )}\n      {nominations.map((movie) => (\n        <NominationDisplay\n          movie={movie}\n          removeNomination={removeNomination}\n        ></NominationDisplay>\n      ))}\n    </Col>\n  );\n};\n","import React, { useState } from \"react\";\nimport \"./App.css\";\nimport { AppHeader } from \"./AppHeader\";\nimport { SearchBox } from \"./SearchBox\";\nimport { MovieResults } from \"./MovieResults\";\nimport { NominationsList } from \"./NominationsList\";\nimport { Col, Container, Nav, Row } from \"react-bootstrap\";\n\nfunction App() {\n  const [query, setQuery] = useState(\"\");\n\n  const onChange = (newQuery: string) => {\n    setQuery(newQuery);\n  };\n\n  return (\n    <Container>\n      <Nav activeKey=\"https://github.com/ArdyParty/shopify-nominator\">\n        <Nav.Item>\n          <Nav.Link href=\"https://github.com/ArdyParty/shopify-nominator\">GitHub Repo</Nav.Link>\n        </Nav.Item>\n      </Nav>\n      <Row style={{padding: '50px'}}>\n        <AppHeader />\n      </Row>\n      <Row style={{padding: '0 50px 50px'}}>\n        <SearchBox onChange={onChange} />\n      </Row>\n      <Row>\n        <MovieResults query={query} />\n        <NominationsList />\n      </Row>\n    </Container>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\n\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}